{"version":3,"file":"static/js/160.08b1b31d.chunk.js","mappings":"0HAAO,MAAMA,EAAmC,QAAhCC,EAAGC,6CAA6BD,EAAI,qB,+DCGpD,MAAME,EAAc,CAChB,CAAEC,GAAI,EAAGC,MAAO,cAAeC,YAAa,mBAAoBC,KAAM,GACtE,CAAEH,GAAI,EAAGC,MAAO,aAAcC,YAAa,GAAIC,KAAM,IAG5CC,EAAW,CACpBC,EAAAA,KAAKC,IAAI,GAADC,OAAIX,EAAAA,IAAO,CAACY,EAAKC,EAAKC,IAEnBD,EAAIC,EAAIC,OAAO,KAAMD,EAAIE,KAAKb,MAGzCM,EAAAA,KAAKC,IAAI,GAADC,OAAIX,EAAAA,EAAG,SAAQ,CAACY,EAAKC,EAAKC,KAE9B,MAAMG,EAAOd,EAAYe,MAAKC,GAAOA,EAAIf,MAAQQ,EAAIQ,OAAOhB,KAE5D,OAAOS,EAAIC,EAAIC,OAAO,KAAMD,EAAIE,KAAKC,GAAM,IAG/CR,EAAAA,KAAKY,MAAM,GAADV,OAAIX,EAAAA,EAAG,SAAQ,CAACY,EAAKC,EAAKC,KAEhC,MAAMQ,EAAYnB,EAAYoB,WAAUJ,GAAOA,EAAIf,MAAQQ,EAAIQ,OAAOhB,KAEtE,IAAmB,IAAfkB,EACJ,CACI,MAAME,EAAQrB,EAAYmB,GAAWf,KAerC,OAbAJ,EAAYmB,GAAWf,KAAiB,IAAViB,EAAc,EAAI,EAEhDrB,EAAYsB,MAAK,CAACC,EAAGC,IAEbD,EAAEnB,KAAOoB,EAAEpB,MAAc,EACzBmB,EAAEnB,KAAOoB,EAAEpB,MAEXmB,EAAEtB,GAAKuB,EAAEvB,GAFe,EAGxBsB,EAAEtB,GAAKuB,EAAEvB,IAAY,EAElB,IAGJS,EAAIC,EAAIC,OAAO,KAC1B,KAGJN,EAAAA,KAAKmB,KAAK,GAADjB,OAAIX,EAAAA,IAAO6B,MAAOjB,EAAKC,EAAKC,KACpC,IAADgB,EACI,MAAMC,QAAanB,EAAII,OAEjBgB,EAAU,CACZ5B,GAAID,EAAY8B,OAAS,EACzB5B,MAAO0B,EAAK1B,MACZC,YAA6B,QAAlBwB,EAAEC,EAAKzB,mBAAW,IAAAwB,EAAAA,EAAI,GACjCvB,KAAM,GAKV,OAFAJ,EAAY+B,QAAQF,GAEbnB,EAAIC,EAAIC,OAAO,KAAK,KCxDtBoB,GAASC,EAAAA,EAAAA,gBAAe5B,E","sources":["constants/constants.ts","mocks/handlers.js","mocks/browser.js"],"sourcesContent":["export const API = process.env.REACT_APP_API_URL ?? 'http://0.0.0.0:8000';","import { rest } from \"msw\";\nimport { API } from \"../constants/constants\";\n\nconst mockedTodos = [\n    { id: 2, title: \"second task\", description: \"with description\", done: 0 },\n    { id: 1, title: \"first task\", description: \"\", done: 0 }\n];\n\nexport const handlers = [\n    rest.get(`${API}`, (req, res, ctx) =>\n    {\n        return res(ctx.status(200), ctx.json(mockedTodos));\n    }),\n\n    rest.get(`${API}/:id`, (req, res, ctx) =>\n    {\n        const todo = mockedTodos.find(elm => elm.id === +req.params.id);\n\n        return res(ctx.status(200), ctx.json(todo));\n    }),\n\n    rest.patch(`${API}/:id`, (req, res, ctx) =>\n    {\n        const todoIndex = mockedTodos.findIndex(elm => elm.id === +req.params.id);\n\n        if (todoIndex !== -1)\n        {\n            const state = mockedTodos[todoIndex].done;\n\n            mockedTodos[todoIndex].done = state === 0 ? 1 : 0;\n\n            mockedTodos.sort((a, b) =>\n            {\n                if (a.done < b.done) return -1;\n                if (a.done > b.done) return 1;\n\n                if (a.id < b.id) return 1;\n                if (a.id > b.id) return -1;\n\n                return 0;\n            });\n\n            return res(ctx.status(204))\n        }\n    }),\n\n    rest.post(`${API}`, async (req, res, ctx) =>\n    {\n        const body = await req.json();\n\n        const newTodo = {\n            id: mockedTodos.length + 1,\n            title: body.title,\n            description: body.description ?? '',\n            done: 0\n        };\n\n        mockedTodos.unshift(newTodo);\n\n        return res(ctx.status(201));\n    }),\n];","import { setupWorker } from \"msw\";\nimport { handlers } from \"./handlers\";\n\nexport const worker = setupWorker(...handlers);"],"names":["API","_process$env$REACT_AP","process","mockedTodos","id","title","description","done","handlers","rest","get","concat","req","res","ctx","status","json","todo","find","elm","params","patch","todoIndex","findIndex","state","sort","a","b","post","async","_body$description","body","newTodo","length","unshift","worker","setupWorker"],"sourceRoot":""}