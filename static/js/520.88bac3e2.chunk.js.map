{"version":3,"file":"static/js/520.88bac3e2.chunk.js","mappings":"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","sources":["constants/constants.ts","data/fetchApi.ts","components/TodoPartial.tsx","typeguards.ts","components/AddTodoButton.tsx","components/List.tsx","components/ErrorPage.tsx","components/TodoComplete.tsx","components/AddTodo.tsx","routes/Router.tsx"],"sourcesContent":["export const API = process.env.REACT_APP_API_URL ?? 'http://0.0.0.0:8000';","import { LoaderFunctionArgs } from \"react-router-dom\";\nimport { API } from \"../constants/constants\";\n\nexport async function getAllTodos()\n{\n    const todos = await fetch(`${API}`)\n\n    if (todos.status === 200)\n    {\n        return todos;\n    }\n    else\n    {\n        throw new Response(\"\", {\n            status: 404,\n            statusText: \"Not Found\",\n        });\n    }\n}\n\nexport async function getTodoById(args: LoaderFunctionArgs<any>)\n{\n    const todo = await fetch(`${API}/${args.params.id}`);\n\n    if (todo.status === 200)\n    {\n        return todo;\n    }\n    else\n    {\n        throw new Response(\"\", {\n            status: 404,\n            statusText: \"Not Found\",\n        });\n    }\n}\n\nexport async function toggleTodoState(id: number)\n{\n    return fetch(`${API}/${id}`, { method: \"PATCH\" })\n        .then((res) =>\n        {\n            return res.status;\n        })\n        .catch(() =>\n        {\n            return 500;\n        })\n}\n\nexport async function addTodo(title: string, description: string | undefined)\n{\n    const data = { title, description };\n\n    return fetch(API, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(data)\n    })\n        .then((res) =>\n        {\n            return res.status;\n        })\n}","import { Link, useNavigate } from \"react-router-dom\";\nimport { TTask } from \"../types\";\nimport { toggleTodoState } from \"../data/fetchApi\";\n\nexport function TodoPartial(props: { todo: TTask })\n{\n    const { title, done, id } = props.todo;\n\n    const navigate = useNavigate();\n\n    const toggleState = async (id: number) =>\n    {\n        const statusCode = await toggleTodoState(id);\n\n        if (statusCode === 204)\n        {\n            navigate(\"/\");\n        }\n        else\n        {\n            navigate(\"/error\");\n        }\n    }\n\n    return <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={id}>\n        <Link to={`/${id}`}>\n            <h2\n                className={done === 1 ? \"text-decoration-line-through\"\n                    : 'link-offset-2 link-offset-3-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover'}>\n                {title}\n            </h2>\n        </Link>\n\n        <div className=\"form-check\">\n            <input onChange={() => toggleState(id)} className=\"form-check-input\" type=\"checkbox\" value=\"\" checked={!!done} />\n        </div>\n    </li>\n}","import { TTask } from \"./types\";\n\nexport function isTodo(task: unknown | undefined): task is TTask\n{\n    return typeof task === \"object\" && task !== null && \"title\" in task;\n}\n\nexport function isTodoList(todos: unknown | undefined): todos is TTask[]\n{\n    return Array.isArray(todos) && typeof todos[0] === \"object\"  && todos[0] !== null && \"title\" in todos[0]\n}","import { Link } from \"react-router-dom\";\n\nexport function AddTodoButton()\n{\n    return (\n        <Link to='/add-todo'>\n            <button className=\"position-absolute top-0 end-0 m-2 btn btn-primary rounded-circle shadow-sm\">&#10010;</button>\n        </Link>\n    )\n}","import { TodoPartial } from \"./TodoPartial\";\nimport { useLoaderData } from \"react-router-dom\";\nimport { isTodoList } from \"../typeguards\";\nimport { AddTodoButton } from \"./AddTodoButton\";\n\nexport function List()\n{\n    const todos = useLoaderData();\n\n    return (\n        <>\n            <AddTodoButton />\n            <div className=\"m-2\">\n                <ul className=\"list-group\">\n                    {isTodoList(todos) && todos.map(todo => TodoPartial({ todo }))}\n                </ul>\n            </div>\n        </>\n    )\n}","import { useRouteError } from \"react-router-dom\";\n\nexport default function ErrorPage() {\n  const error = useRouteError();\n\n  return (\n    <div className=\"p-2 text-center\">\n      <h1>Oops!</h1>\n      <p>Sorry, an unexpected error has occurred.</p>\n    </div>\n  );\n}","import { useLoaderData, useNavigate } from \"react-router-dom\";\nimport { toggleTodoState } from \"../data/fetchApi\";\nimport { TTask } from \"../types\";\n\nexport function TodoComplete()\n{\n    const navigate = useNavigate();\n\n    const todo = useLoaderData() as TTask;\n\n    const toggleState = async (id: number) =>\n    {\n        const statusCode = await toggleTodoState(id);\n\n        if (statusCode === 204)\n        {\n            navigate(\"/\");\n        }\n        else\n        {\n            navigate(\"/error\");\n        }\n    }\n\n    const { id, title, done, description } = todo;\n\n    return (\n        <div className=\"border rounded p-2 m-2\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <h2 className={done === 1 ? \"text-decoration-line-through\" : ''}>{title}</h2>\n                <div className=\"form-check\">\n                    <input onChange={() => toggleState(id)} className=\"form-check-input\" type=\"checkbox\" value=\"\" checked={!!done} />\n                </div>\n            </div>\n            <p>{description}</p>\n        </div>\n    )\n}","import { FormEvent } from \"react\";\nimport { addTodo } from \"../data/fetchApi\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport function AddTodo()\n{\n    const navigate = useNavigate();\n\n    const submitTodo = async (event: FormEvent) =>\n    {        \n        event.preventDefault();\n        \n        const target = event.target as typeof event.target & {\n            title: { value: string };\n            description: { value: string };\n        };\n\n        const title = target.title.value;\n        const description = target.description?.value || ''; \n\n        const statusCode = await addTodo(title, description);\n\n        if (statusCode === 201)\n        {\n            navigate('/');\n        }\n    }\n\n    return (\n        <>\n            <h2 className=\"m-2\">Add a todo</h2>\n            <form role=\"form\" className=\"m-2\" onSubmit={submitTodo}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"title-input\" className=\"form-label\">Title</label>\n                    <input role=\"input\" type=\"text\" className=\"form-control\" name=\"title\" id=\"title-input\" placeholder=\"my todo title\" required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"description-input\" className=\"form-label\">add a description if you want</label>\n                    <textarea role=\"textarea\" className=\"form-control\" id=\"description-input\" name=\"description\" rows={3}></textarea>\n                </div>\n                <div className=\"col-12\">\n                    <button role=\"submit\" className=\"btn btn-primary\" type=\"submit\">Submit todo</button>\n                </div>\n            </form>\n        </>\n    )\n}","import { createBrowserRouter } from \"react-router-dom\";\nimport { List } from \"../components/List\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport { TodoComplete } from \"../components/TodoComplete\";\nimport { getAllTodos, getTodoById } from \"../data/fetchApi\";\nimport { AddTodo } from \"../components/AddTodo\";\n\nexport const Router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <List />,\n      loader: getAllTodos,\n      errorElement: <ErrorPage />\n    },\n    {\n      path: \"/:id\",\n      element: <TodoComplete />,\n      loader: getTodoById,\n      errorElement: <ErrorPage />\n    },\n    {\n      path: \"/add-todo\",\n      element: <AddTodo />,\n      errorElement: <ErrorPage />\n    },\n    {\n      path: \"/error\",\n      element: <ErrorPage />,\n    }\n  ]);"],"names":["API","_process$env$REACT_AP","process","async","toggleTodoState","id","fetch","concat","method","then","res","status","catch","TodoPartial","props","title","done","todo","navigate","useNavigate","_jsxs","className","children","_jsx","Link","to","onChange","statusCode","toggleState","type","value","checked","isTodoList","todos","Array","isArray","AddTodoButton","List","useLoaderData","_Fragment","map","ErrorPage","useRouteError","TodoComplete","description","AddTodo","role","onSubmit","_target$description","event","preventDefault","target","data","headers","body","JSON","stringify","addTodo","htmlFor","name","placeholder","required","rows","Router","createBrowserRouter","path","element","loader","Response","statusText","errorElement","args","params"],"sourceRoot":""}